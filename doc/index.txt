.. include:: ../README.rst

Reason for this package
=======================

It is not possible to use a ``ZODB`` database with both Python 2 and Python 3.
There are the following reasons for this behavior:

#. When reading a database -- created using Python 2 -- using Python 3 string
   objects would be read as Python 3 string objects requiring them to be ASCII
   encoded. If actual binary data is stored in such a ``str`` object its class
   has to inherit ``zodbpickle.binary``, so it will be unpickled as ``binary``.
#. Because of reason #1 ``zodbpickle`` requires different magic bytes (the
   first bytes of the database file)  for a ZODB generated by the different
   Python versions.

Upgrade workflow
================

#. Install ``zodb.py3migrate`` into your project, so it has access to your
   persistent classes when resolving ZODB objects.

#. After installing, you can use the entry point ``bin/zodb-py3migrate
   path/to/Data.fs`` to run the script.

   * The script shows a list of attributes grouped by their class that are
     Python 2 strings, i. e. binary string with an encoding different from
     ASCII. Decide for each attribute if it really is a binary string, i. e.
     for images, or if it should be text, i. e. ``unicode``.

   * Attributes that should remain binary strings must become an instance of
     ``zodbpickle.binary`` so ZODB knows that this fields should be treated as
     binary.

   * Since ZODB will read all non-marked binary strings as unicode, you must
     convert all text fields to ``unicode`` and adjust the class accordingly.

   * Your ZODB is Python 3 ready if the script does not output any attribute
     anymore, since all binary string were either converted to unicode or
     marked as binary.

   * .. note:: The displayed total number of objects in the ``ZODB`` is only an
               approximation as returned by the ``FileStorage`` API.

#. Convert binary attributes in code base to Python 3.

   * Mark binary attributes with ``zodbpickle.binary`` to be compatible with
     Python 2 and Python 3, so you can continue using Python 2 without writing
     incompatible data.

   * If you only need Python 3 compatibility it is sufficient to use ``bytes``.

#. Convert the ``Python Script`` objects inside the ZODB to be Python 3
   compatible. (Find all of them using the ``Find`` tab in the ZMI.)

#. Convert existing data in the ZODB for Python 3 compatibility by calling
   ``bin/zodb-py3migrate path/to/Data.fs --config=conversion.ini``.

   * Example for conversion config, i.e. ``conversion.ini`` in call above.

     .. code-block:: pacmanconf

         [zodbpickle.binary]
         foo.bar.Baz.image

         [utf-8]
         foo.bar.Baz.text
         foo.bar.Baz.title

         [latin-1]
         foo.bar.Baz.legacy

   * All entries of the section ``[zodbpickle.binary]`` will be wrapped into
     ``zodbpickle.binary``, whereas all entries of other sections will be
     decoded to unicode using the section name as encoding.

   * .. note:: The conversion only changes values, but not keys, since this
               would break the application code.

#. Call ``bin/zodb-py3migrate-magic path/to/Data.fs Python3`` to convert the
   magic bytes of the database file to claim Python 3 compatibility. (Use
   ``Python2`` to revert back to Python 2.)

Example call
============

.. code-block:: none

    $ bin/zodb-py3migrate path/to/Data.fs
    Found 3 binary fields, including how often they occurred.
      foo.bar.Baz.image (string) (12)
      foo.bar.Baz.legacy (iterable) (1)
      foo.bar.Baz.text (string) (23)

.. toctree::
    :maxdepth: 2

    api
    about
    changes


- :ref:``genindex``
